PART-3- OPERATORS:

Operator are symbols that represent simple computations.
AIRTHMETIC OPERATOR-
Operators performing airthematic computations are called airthmetic operators. eg: '+','-','*','/' etc.
In the program hour * 60 + min is an expression, which represents a single value to be computed. When the program
runs, each variable is replaced by its current value, and then the operators are applied. The values operators 
work with are called operands.
Expressions are generally a combination of numbers, variables and operators. When compiled and executed, they 
become a single value. 
Addition, division and multiplication all do the expected in java except division. Its so because java performs 
"integer division" when the operands are integers. By design, integer division always rounds towards 0, even in 
cases like this one where the next integer is close.
As an alternative, we can calculate a percentage instead of fraction.
--------------------------------------------------------------------------------------------------------------------------------
FLOATING POINT NUMBERS-
The more generalised solution is to use floating point numbers, which can represent fractions as well as integers
In java, the default floating point type is called double which is short for double precision.
Java performs "floating point divisions" when one or more operands are double values. 
Although floating point numbers are useful, they can in some case be a source of confusion. For eg: Java 
distinguishes the integer value 1 from the floating point value 1.0, even though they seem to be the same number.
They belong to different data types, and strictly speaking, you are nt allowed to make assignments between types
The following is illegal because the variable on the left is not an int and the value on the right is a double:
        : int x = 1.1; //compiler error
Its easy to forget this rule as in many cases Java automatically converts from one type to another:
        double y = 1 // legal but bad style 
The preceding example should be illegal, but Java allows it by cinverting the int value 1 into 1.0 automatically.
This leniencty is convenient, but it often causes problems for beginners. For eg:
        double y = 1/3; //common mistake (integer division).
        double y = 1.0/3.0 // now it performs floating point division.
---------------------------------------------------------------------------------------------------------------------------------
ROUNDING ERRORS-
Most floating point numbers are only approximately correct. Some numbers, like reasonably sized integers, can be 
represented exactly. But repeating fractions, like 1/3, and iraational numbers like pi can't. To represent these
numbers, computers round off to the nearest floating point number.
The difference between the number we want and the floating point number we get is called rounding error. for eg:
         System.out.println(0.1*10);  //output = 1.0
         System.out.println(0.1+0.1+.01+0.1+0.1+0.1+0.1+0.1+0.1+0.1); // output= 0.9099999999999
The problem is that 0.1 which is a terinating fraction in decimal, is a repeating fraction in binary. So its 
floating point representation is only approximate. When we add up approximations, the rounding errors accumulates.

For many applications, like computer graphics, encryption, statistical analysis and multimedia rendering,floating 
point airthmetic has benefits that outweigh the cost. But if you need absolute precision, use integers instead.
for eg:     double balance = 123.45; // potential rounding off
In this eg; the balance will be inaccurate over time as the variable is used in airthmetic operations like 
deposits and withdrawls. You can avoid the problem by representing the balance as an integer:
            int balance = 12345 //total no.of paise.
---------------------------------------------------------------------------------------------------------------------------------
OPERATOR FOR STRINGS - 
In general you can not perform mathematical operations on strings, even if they are like numbers. The following 
expressions are illegal :       "Hello" - 1        "World" / 123       "Hello" * "World"
The '+' operator works with stings. The '+' operator performs concatenation, which means joining end to end.
Since addition is defined for both number and strings, Java performs automatic conversions you many not expect:
for eg:     System.out.println(1 + 2 + "Hello"); // output= 3Hello.
            System.out.println("Hello" + 1 + 2); // output= Hello12.
Java executes these operations from left to right. In the first line, 1+2 is 3 and 3 + "Hello" is 3Hello. But in 
2nd line "Hello" + 1 is Hello1 and Hello1 + 2 is Hello12.

when more than one operator appears in the expression, they are evaluated according to order of operrations. 
Generally speaking, Java executes operators from left to right. But for numeric operators, Java follows 
mathematical conventions.
    - Multiplications and divisions take "percedence" over addition and subtraction, which means that they happen 
      first.
    - If the operators have same percedence they are evaluated from left to right 
    - Any time you want to override the order of operations(or you are not sure what it is) you can use 
      parenthesis
-----------------------------------------------------------------------------------------------------------------------------------
COMPOSITION-
one of the most useful features of programming language is their ability to take small building blocks and compose 
them. for eg, we know how to multiply numbers and we know how to display values. We can combine these operations 
into a single statement:
                System.out.println(14*5);
Any airthmetic expression can be used inside a print statement. eg:
                System.out.println(hour * 60 + min);
        You can also put arbitrary expressions on the right side of an assignment:
                int percentage;
                percentage = (min * 100) / 60;
        The left side of the assignment must be a variable name, not an expression. That's because left indicates 
where the result will be stored, and expression don't represent storage locations.
        eg:     hour = min + 1; //correct
                min + 1 = hour; //compiler error
-----------------------------------------------------------------------------------------------------------------------------------








